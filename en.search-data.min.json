[{"id":0,"href":"/hermit/usage/","title":"Usage","parent":"Hermit","content":"This documentation describes how to use Hermit within your own projects.\n   Get Started     Environment variables     Package management     Editor / IDE Integration     Shell Integration     Configuration     Continuous Integration     Updating     "},{"id":1,"href":"/hermit/usage/get-started/","title":"Get Started","parent":"Usage","content":"This document gives a brief introduction to installing Hermit and using a newly created environment.\nInstalling Hermit    Installing Hermit is straightforward:\ncurl -fsSL https://github.com/cashapp/hermit/releases/download/stable/install.sh | /bin/bash This will download and install hermit into ~/bin. You should add this to your $PATH if it isn't already.\nAlso consider installing the shell hooks to get automatic environment activation/deactivation when changing directories.  Initialising a Project    Change into a project directory and run the following:\n~$ cd ~/project ~/project$ hermit init info: Creating new Hermit environment in /home/user/project ... At this point the Hermit environment should be initialised and the ./bin directory should contain something like the following:\nREADME.hermit.md activate-hermit hermit hermit.hcl Activating an Environment    Activating an environment will add its bin directory to your $PATH, as well as setting any environment variables managed by Hermit.\nTo activate a Hermit environment source the activate-hermit script:\n~/project$ . ./bin/activate-hermit Hermit environment /home/user/project activated project🐚~/project$ Once activated the shell prompt will change to include the prefix \u0026lt;environment\u0026gt;🐚.\nAt this point you can use and manage packages in this environment.\nInstalling a package    One your environment is activated, use hermit install to install packages:\nproject🐚~/project$ hermit install go-1.16.3 project🐚~/project$ go version go version go1.16.3 darwin/amd64 Refer to the package management documentation for more details, including how to uninstall, information about channels, etc.\nDeactivating an Environment    When an environment is activated, Hermit inserts a shell function deactivate-hermit. Call this to deactivate the current environment.\nproject🐚~/project$ deactivate-hermit Hermit environment /home/user/project deactivated ~/project$ "},{"id":2,"href":"/hermit/usage/envars/","title":"Environment variables","parent":"Usage","content":"When a Hermit environment is active, environment variables will be set by Hermit itself, the command-line, the active environment, and installed packages, in that order.\nHermit    Hermit prefixes all of its own variables with HERMIT_ or _HERMIT_. While it uses a bunch of variables internally, two you can rely on to always be present in an active environment are:\n   Name Description      HERMIT_ENV Path to the active Hermit environment.    HERMIT_BIN Path to the active Hermit environment bin directory.     An empty environment might look something like the following:\nproject🐚~/project$ hermit env HERMIT_BIN=/home/user/project/bin HERMIT_ENV=/home/user/project PATH=/home/user/project/bin:/home/user/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/local/bin Command-line    Use the flag --env=NAME=value to set per-invocation environment variables.\nActive Environment    The active environment may define additional environment variables in bin/hermit.hcl. These can be managed with the hermit env command, or by directly editing the configuration file.\nFor example, to set GOBIN to a build directory within the environment:\nproject🐚~/project$ hermit env GOBIN \u0026#39;${HERMIT_ENV}/build\u0026#39; project🐚~/project$ hermit env GOBIN=/home/user/project/build GOROOT=/home/user/.cache/hermit/pkg/go-1.16 ... project🐚~/project$ echo $GOBIN /home/user/project/build The bin/hermit.hcl file will contain:\n# Extra environment variables. env = { \u0026#34;GOBIN\u0026#34;: \u0026#34;${HERMIT_ENV}/build\u0026#34;, } Use the hermit env command to view and set per-environment variables:\nUsage: hermit env [\u0026lt;name\u0026gt;] [\u0026lt;value\u0026gt;] Manage environment variables. Without arguments the \u0026#34;env\u0026#34; command will display environment variables for the active Hermit environment. Passing \u0026#34;\u0026lt;name\u0026gt;\u0026#34; will print the value for that environment variable. Passing \u0026#34;\u0026lt;name\u0026gt; \u0026lt;value\u0026gt;\u0026#34; will set the value for an environment variable in the active Hermit environment.\u0026#34; Arguments: [\u0026lt;name\u0026gt;] Name of the environment variable. [\u0026lt;value\u0026gt;] Value to set the variable to. Flags: -r, --raw Output raw values without shell quoting. --activate Prints the commands needed to set the environment to the activated state --deactivate Prints the commands needed to reset the environment to the deactivated state -i, --inherit Inherit variables from parent environment. -n, --names Show only names. -u, --unset Unset the specified environment variable. Take care to only use single quotes (') when setting values so that the shell doesn't interpolate environment variables before Hermit. ie. Do not do this:\nproject🐚~/project$ hermit env GOBIN \u0026#34;${HERMIT_ENV}/build\u0026#34; as it will result in this bin/hermit.hcl:\n# Extra environment variables. env = { \u0026#34;GOBIN\u0026#34;: \u0026#34;/home/user/project/build\u0026#34;, } This will of course work fine for the local user, but will fail tragically for anyone else.\n Installed Packages    Packages may export environment variables for convenience or in order to operate correctly. For example, the go package sets the GOROOT to the location of the installed Go SDK:\nproject🐚~/project$ hermit install go project🐚~/project$ hermit env GOROOT=/home/user/.cache/hermit/pkg/go-1.16 ... "},{"id":3,"href":"/hermit/usage/management/","title":"Package management","parent":"Usage","content":"This document describes how packages within a Hermit environment can be found, installed, and managed. Packages are defined in configuration files called manifests which are retrieved from collections of manifests called manifest sources which in turn are commonly (but not always) Git repositories.\nKeeping up to Date    Hermit retrieves package manifests from various locations, including Git repositories. It will periodically sync these repositories to your system to ensure you have the most up to date manifests, but you may also force this by running:\nproject🐚~/project$ hermit sync Searching for Packages    Search for packages with the search command, optionally passing a substring to match within the package name or description:\nproject🐚~/project$ hermit search rust rust (@nightly, 1.51.0) A language empowering everyone to build reliable and efficient software. Selecting Packages    Packages can be selected in one of three ways:\n  By version - \u0026lt;package\u0026gt;-\u0026lt;version\u0026gt;\nA specific version of a package can be installed by specifying \u0026lt;package\u0026gt;-\u0026lt;version\u0026gt;. eg. hermit install rustc-1.51.0\n  By channel - \u0026lt;package\u0026gt;@\u0026lt;channel\u0026gt;\nChannels can be explicitly selected with \u0026lt;package\u0026gt;@\u0026lt;channel\u0026gt;, eg. hermit install rustc@nightly. Channels are automatically updated at a frequency defined by the package manifest.\n  By preferred version - \u0026lt;package\u0026gt;\nWhen specifying just a package name, ie. \u0026lt;package\u0026gt;, the preferred version will be installed. The preferred version is, in order of priority:\n The version specified as the default in the manifest. The latest stable version. The latest unstable version. The last channel, alphabetically.    Installing Packages    To install the latest stable version of protoc and the nightly channel of rust:\nproject🐚~/project$ hermit install rust@nightly protoc At this point if you ls bin you will see something like the following:\nproject🐚~/project$ ls bin README.hermit.md clippy-driver@ rust-analyzer@ rustc@ activate-hermit* hermit* rust-demangler@ rustdoc@ cargo@ hermit.hcl rust-gdb@ cargo-clippy@ miri@ rust-gdbgui@ cargo-miri@ protoc@ rust-lldb@ List Installed Packages    To list packages installed in the active environment:\nproject🐚~/project$ hermit list protoc (3.14.0) protoc is a compiler for protocol buffers definitions files. rust (@nightly) A language empowering everyone to build reliable and efficient software. Package Information    You can obtain more detailed package information with hermit info \u0026lt;package\u0026gt;, eg.\nproject🐚~/project$ hermit info rust hermit info rust@nightly Name: rust Channel: nightly Description: A language empowering everyone to build reliable and efficient software. State: installed Last used: 3m36.889138s ago Source: https://static.rust-lang.org/dist/rust-nightly-x86_64-apple-darwin.tar.xz Root: /home/user/.cache/hermit/pkg/rust@nightly Binaries: cargo cargo-clippy clippy-driver cargo-miri miri rust-analyzer rust-demangler rust-gdb rust-gdbgui rust-lldb rustc rustdoc Upgrading Packages    For package channels or versions that adhere to semantic versioning, Hermit will automatically upgrade to the latest minor version using the hermit upgrade command:\nproject🐚~/project$ hermit upgrade rust project🐚~/project$ rustc --version rustc 1.51.0 (2fd73fabe 2021-03-23) Downgrading / Changing Versions    To downgrade or switch to a specific version, use hermit install to explicitly specify the version. eg.\nproject🐚~/project$ hermit install rust-1.50.0 project🐚~/project$ rustc --version rustc 1.50.0 (940f2a77 2021-01-02) Uninstalling Packages    Use hermit uninstall:\nproject🐚~/project$ hermit uninstall rust "},{"id":4,"href":"/hermit/usage/ide/","title":"Editor / IDE Integration","parent":"Usage","content":"Due to the way JetBrains IDE plugin APIs are designed, specific support for each language has to be built into the plugin. Currently only the JDK and Go are supported.  Add the following URL to your IDE via the [Custom Plugin Repositories](https://www.jetbrains.com/help/idea/custom-plugin-repositories.html) dialog: ```text https://github.com/cashapp/hermit/releases/download/stable/updatePlugins.xml ``` Then search for the \"Hermit\" plugin and install it. You will need to restart your IDE. The plugin will automatically configure Go and Java SDKs to work with the IDE, including Run Configurations, tests, and the builtin terminal. -- Terminal-based Editors    Terminal based editors should Just Work™️ if launched after a Hermit environment is activated.\nMac GUI Editors (Workaround)    For other editors and IDEs, the best solution in lieu of native plugins is to open up a terminal, activate the Hermit environment, then launch the editor from the terminal. This is not ideal, but does work until a plugin is available.\n Close your editor. From a terminal activate your Hermit environment: . ./bin/activate-hermit Launch your editor from the terminal:    Editor Launch command     Sublime subl -nd .   Visual Studio Code code .      At this point your editor should be running with environment variables from the Hermit environment.\nOther    Some IDEs/editors have support for configuring environment variables explicitly. In this case you can use hermit env to dump a machine-readable list of the environment variables Hermit manages. This can then be configured in your IDE.\nNote that if you add/remove packages from your Hermit environment you will need to reconfigure your IDE to pick up any changes to environment variable.  "},{"id":5,"href":"/hermit/usage/shell/","title":"Shell Integration","parent":"Usage","content":"Tracking Environment Variables    When a Hermit environment is activated, Hermit will install a shell hook to keep your shell's environment variables synchronised with Hermit's environment variables as you add and remove packages. This hook executes prior to each command.\nAutomatic Environment Activation / Deactivation    Hermit can also install shell integration hooks to automate activation/deactivation of Hermit environments as you change directories in your terminal.\nZsh    This will install Hermit hooks into your ~/.zshrc file. Restart your shell in order for the changes to take effect.\nhermit shell-hooks --zsh Bash    This will install Hermit hooks into your ~/.bashrc file. Restart your shell in order for the changes to take effect.\nhermit shell-hooks --bash "},{"id":6,"href":"/hermit/usage/config/","title":"Configuration","parent":"Usage","content":"Each Hermit environment contains a bin/hermit.hcl file that can be used to customise that Hermit environment.\nAttributes       Attribute Type Description     env {string:string}? Extra environment variables.   sources [string]? Package manifest sources in order of preference.   manage-git bool? Whether Hermit should manage Git.    Per-environment Sources    Hermit supports three different manifest sources:\n Git repositories; any cloneable URI ending with .git, eg.https://github.com/cashapp/hermit-packages.git Local filesystem, eg. file:///home/user/my-packages.This is mostly only useful for local development and testing. Environment relative, eg. env:///my-packages.This will search for package manifests in the directory ${HERMIT_ENV}/my-packages. Useful for local overrides.  "},{"id":7,"href":"/hermit/usage/ci/","title":"Continuous Integration","parent":"Usage","content":"Generally, using Hermit in CI is similar to using it locally - activate your environment via . ./bin/activate-hermit, add \u0026lt;repo\u0026gt;/bin to your $PATH, or use ./bin/hermit env to directly update your CI environment.\nGitHub Actions    Using Hermit in GitHub Actions is straightforward. Just add the following step to each job:\n- name:Init Hermitrun:./bin/hermit env \u0026gt;\u0026gt; $GITHUB_ENVeg.\njobs:test:name:Testruns-on:ubuntu-lateststeps:- name:Checkout codeuses:actions/checkout@v2- name:Init Hermitrun:./bin/hermit env \u0026gt;\u0026gt; $GITHUB_ENV- name:Testrun:go test ./..."},{"id":8,"href":"/hermit/usage/updates/","title":"Updating","parent":"Usage","content":"Hermit is designed in such a way that it and its package manifests are always on the latest version. To that end, Hermit will check for and upgrade to new releases of itself once every 24 hours, and will sync to the latest package definitions every 24 hours. If you notice a pause when using Hermit, this is often the cause.\nYou can read more about the implications of this on package maintenance in the packaging introduction.\nIn addition, some packages may define channels which allow packages to be kept up to date automatically with upstream releases. Channels specify their own update frequency which Hermit will use to periodically check for updates. If the ETag for the package has changed, Hermit will download and upgrade the package.\n"},{"id":9,"href":"/hermit/faq/","title":"FAQ","parent":"Hermit","content":"  Which Shells Does Hermit work with? Does Hermit Manage Libaries? Could Hermit include Python, Ruby? Why Doesn't Hermit Have a Package for ...? Does the Hermit Project Build and Host its own Packages? How is Hermit different to ...?  Docker Bazel asdf Nix GoFish Homebrew     Which Shells Does Hermit work with?    Hermit currently works with ZSH and BASH, but we would welcome contributions to support other shells.\nDoes Hermit Manage Libaries?    No, Hermit is deliberately not in the business of installing libraries. Hermit is designed to manage development tools only, not be a general purpose package manager. Consider Nix if you need this kind of functionality.\nCould Hermit include Python, Ruby?    Theoretically yes, but there are several limiting factors:\n Python does not provide relocatable packages for OSX. Python does not provide self-contained binary packages for Linux at all, deferring this responsibility to OS package managers. Many Python and Ruby packages are wrappers around C libraries. As Hermit does not manage libraries at all, this makes distributing Python/Ruby through Hermit of limited usefulness.  Why Doesn't Hermit Have a Package for ...?    There could be a number of reasons why a package isn't present in Hermit.\n The package may not be conducive to self-contained packaging (eg. Python). The community might not have needed one (yet) - please contribute one!  Does the Hermit Project Build and Host its own Packages?    No, Hermit is a package installer only. Self-contained redistributable packages must be hosted elsewhere, ideally by the package owners.\nHow is Hermit different to ...?    Docker    Docker has a very large community and provides isolation, both of which are appealing. Unfortunately it has several shortcomings which in our view preclude it from use as a day to day development tooling system.\n Filesystem mapping on OSX is very slow. It does not support OSX binaries inside Docker (though see Docker-OSX). Poor integration with host editors/IDEs (though there is some movement).  Bazel    While not really in the same space as Hermit, Bazel does provide build isolation and opt-in hermetic builds. However Bazel also:\n Requires going all-in on Bazel as a build system, whereas Hermit is explicitly not a build system but rather integrates into existing toolchains. Requires completely separate tooling, editor/IDE integration and so on.  asdf    Hermit is similar to asdf, but differs in the following key ways:\n Hermit package definitions are declarative and much simpler.  Contrast Java in asdf with Java in Hermit. Hermit's primary goal is to make project tooling self-contained within the repository.  asdf's goal is to allow end users to install tools easily.  Nix    Nix is the package manager for an entire OS and thus provides vastly more functionality than Hermit, including a full package build system. This naturally also comes with a corresponding increase in complexity. Hermit is deliberately designed to be narrow in scope, limited to just installing existing packages.\nGoFish    GoFish's package definitions are quite similar to Hermit's, but GoFish itself:\n Does not support multiple versions of the same package. Requires root for system wide installation. Does not support the concept of \u0026quot;environments\u0026quot;.  Homebrew    Homebrew is a full package build system but also:\n Is a system wide package manager. Is largely OSX specific. Does not support concurrent installation of different versions of the same package well.  "},{"id":10,"href":"/hermit/packaging/","title":"Packaging","parent":"Hermit","content":"Hermit manifests (package definitions) are HCL configuration files defining where to download packages from and how to install them.\n   Tutorial     Reference     Private Packages     Schema     \u0026lt;manifest\u0026gt;.hcl     darwin     linux     channel \u0026lt;name\u0026gt;     version \u0026lt;version\u0026gt;     on \u0026lt;event\u0026gt;     on \u0026gt; chmod     on \u0026gt; copy     on \u0026gt; message     on \u0026gt; rename     on \u0026gt; run       "},{"id":11,"href":"/hermit/packaging/tutorial/","title":"Tutorial","parent":"Packaging","content":"For this tutorial we're going to package up jq, a supremely useful tool for filtering and transforming JSON.\nWriting package manifests for Hermit should be fairly familiar to anyone who has had experience with package managers like Homebrew, though it should be significantly more straightforward assuming the package provides cross-platform binaries for download.\nThis tutorial covers a fairly simple package definition, but more complex examples exist such as graalvm. Please refer to the hermit-packages repository for many more examples.\nClone and Activate the Manifest Repository    git clone https://github.com/cashapp/hermit-packages cd hermit-packages . ./bin/activate-hermit The Hermit manifest repository is itself a Hermit environment configured to use itself as the source of packages. This makes testing very convenient.  Find the Releases    The releases for jq are conveniently in a single page and by downloading one of the links we can see that they're directly downloadable binaries. Convenient.\nCreate a Basic Manifest    Create an empty jq.hcl file in the hermit-packages directory. The first thing you'll want is a description, for which typically just copy the project description from their site or GitHub repository:\ndescription = \u0026#34;jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.\u0026#34; Add a Version    version blocks tell Hermit what versions of a package are available for download and are specified as blocks. We'll start with an empty one for jq-1.6:\nversion \u0026#34;1.6\u0026#34; {} Add Download URLs for Each OS    Looking at the links we can see that there are downloads for Linux and OSX:\n https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64  So we'll add blocks for the respective operating systems (linux and darwin) and populate the source attribute, which tells Hermit where to download packages from:\nversion \u0026#34;1.6\u0026#34; { linux { source = \u0026#34;https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64\u0026#34; } darwin { source = \u0026#34;https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64\u0026#34; } } DRY our URLs    The raw URLs will work fine, but if we add more versions later it would be nice not to have to duplicate this configuration. To do that we can pull the OS blocks out to the top level and use Hermit's variable interpolation support to substitute the ${version} variable:\ndescription = \u0026#34;jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.\u0026#34; linux { source = \u0026#34;https://github.com/stedolan/jq/releases/download/jq-${version}/jq-linux64\u0026#34; } darwin { source = \u0026#34;https://github.com/stedolan/jq/releases/download/jq-${version}/jq-osx-amd64\u0026#34; } version \u0026#34;1.6\u0026#34; {} When selecting a version/channel, Hermit will look for sources in the matching block and fallback to the top-level.\nSpecifying the Binaries    At this point Hermit knows where to download our binaries from, but not what to do with them. The binaries will also have different names(jq-linux64 and jq-osx-amd64) depending on which OS we're on. We need to rename this binaries to the canonical jq. To solve this we're going to need to use a trigger to apply an action when unpacking, specifically the rename action.\nlinux { source = \u0026#34;https://github.com/stedolan/jq/releases/download/jq-${version}/jq-linux64\u0026#34; on unpack { rename { from =\u0026#34;${root}/jq-linux64\u0026#34; to = \u0026#34;${root}/jq\u0026#34; } } } darwin { source = \u0026#34;https://github.com/stedolan/jq/releases/download/jq-${version}/jq-osx-amd64\u0026#34; on unpack { rename { from =\u0026#34;${root}/jq-osx-amd64\u0026#34; to = \u0026#34;${root}/jq\u0026#34; } } } And tell Hermit which binaries to link when installed:\nbinaries = [\u0026#34;jq\u0026#34;] The binaries attribute supports globs, which will be expanded at unpack time.  Testing the Package    Hermit packages can include a testing attribute which is a command to run to test whether the package is functioning. This will typically just be something like:\ntest = \u0026#34;jq --version\u0026#34; The Hermit packages CI will run these tests periodically.\nThe End Result    And we're done.\ndescription = \u0026#34;jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.\u0026#34; binaries = [\u0026#34;jq\u0026#34;] test = \u0026#34;jq --version\u0026#34; linux { source = \u0026#34;https://github.com/stedolan/jq/releases/download/jq-${version}/jq-linux64\u0026#34; on unpack { rename { from =\u0026#34;${root}/jq-linux64\u0026#34; to = \u0026#34;${root}/jq\u0026#34; } } } darwin { source = \u0026#34;https://github.com/stedolan/jq/releases/download/jq-${version}/jq-osx-amd64\u0026#34; on unpack { rename { from =\u0026#34;${root}/jq-osx-amd64\u0026#34; to = \u0026#34;${root}/jq\u0026#34; } } } version \u0026#34;1.6\u0026#34; {} Local Testing    As mentioned above, hermit-packages is also a Hermit environment. Now we have our manifest we can attempt to install it with:\n$ hermit install jq $ jq --version jq-1.6 Distribute the Package    At this point you can (and should!) contribute the package back to the community via a PR.\n"},{"id":12,"href":"/hermit/packaging/reference/","title":"Reference","parent":"Packaging","content":"Update Policy    Hermit syncs manifest sources every 24 hours from HEAD. Because any changes are then immediately reflected in active environments, care must be taken to maintain backwards compatibility.\nIn particular this means:\n Never delete or rename versions. Take care when updating environment variables.  And in general think carefully about what impact your change will have if it is applied to an active environment.\nManifests    Hermit manifests (package definitions) are HCL configuration files defining where to download packages from and how to install them.\nRefer to the schema documentation for details.\nHere's an example manifest for Rust:\ndescription = \u0026#34;A language empowering everyone to build reliable and efficient software.\u0026#34; binaries = [\u0026#34;*/bin/*\u0026#34;] strip = 1 darwin { source = \u0026#34;https://static.rust-lang.org/dist/rust-${version}-x86_64-apple-darwin.tar.xz\u0026#34; } linux { source = \u0026#34;https://static.rust-lang.org/dist/rust-${version}-x86_64-unknown-linux-musl.tar.xz\u0026#34; } version \u0026#34;1.51.0\u0026#34; {} channel nightly { update = \u0026#34;24h\u0026#34; darwin { source = \u0026#34;https://static.rust-lang.org/dist/rust-nightly-x86_64-apple-darwin.tar.xz\u0026#34; } linux { source = \u0026#34;https://static.rust-lang.org/dist/rust-nightly-x86_64-unknown-linux-musl.tar.xz\u0026#34; } } Sources    A manifest source is a location where a set of manifests are stored. Hermit supports manifest sources in Git repositories, local filesystems (useful for temporary overrides while testing packages), and environment-relative.\nMultiple sources can be specified globally by Hermit or per-project, allowing fine-grained control over which package definitions will be used.\nVersions    Version blocks are explicitly defined versions of a particular package.\nChannels    Channels define a download source that will be automatically checked for updates periodically. Hermit will check the URL's ETag and update the package if there is a newer version.\nVariable Interpolation    Hermit manifests support basic variable interpolation to simplify configuration. It's not necessary to utilise them, but they can make life simpler in many cases.\nThe available variables are:\n   Variable Description     version The version selected by the user. Does not apply when installing a channel.   dest The directory where the archive will be extracted. Defaults to \u0026lt;hermit-state\u0026gt;/pkg/\u0026lt;pkg-selector\u0026gt;.   root Directory considered the package root. Defaults to ${dest}.   os The system's OS as reported by Go.   arch The system's CPU architecture as reported by Go.   xarch An alternate mapping of ${arch} where amd64=\u0026gt;x86_64, i386=\u0026gt;386, and arm64=\u0026gt;aarch64.   HERMIT_ENV Path to the active Hermit environment.   HERMIT_BIN Path to the active Hermit environment's bin directory.   HOME The user's home directory.    Triggers and Actions    Hermit supports the concept of triggers and actions which can be applied when certain events occur in the package lifecycle. Supported events are:\n   Event Description     unpack Triggered when a package is unpacked into the Hermit cache.   install Triggered when a package is installed into an environment.   activate Triggered when the environment the package is installed in is activated.    More triggers may be added in the future.\n"},{"id":13,"href":"/hermit/packaging/private/","title":"Private Packages","parent":"Packaging","content":"Custom Hermit    Hermit has a configurable command-line entry point which can be useful if you need to use a custom HTTP client in order to access your private packages or manifest sources. See the hermit main package for an example of how this is used.\nThis can be used to specify a custom set of sources, and other configuration, for your org.\nPrivate Channel    If you ship your own version of Hermit you must choose a unique channel name (typically your oganisation's name), eg. For Square this would be square. If you don't choose a unique channel your users may end up using the public Hermit accidentally, creating confusion.\nInstaller Script    The Hermit installer requires the parent path component of its install URL to be the same as the channel name.  A custom install.sh can be generated by cmd/geninstaller:\ngeninstaller --dest=install.sh --dist-url=https://mycompany.com/mycompany/hermit-install.sh "},{"id":14,"href":"/hermit/packaging/schema/","title":"Schema","parent":"Packaging","content":"Each Hermit package manifest is a nested structure containing OS/architecture-specific configuration.\nThis is reference documentation for the manifest structure. Refer to the tutorial for a guided introduction and existing manifests for examples.\nTable of Contents        \u0026lt;manifest\u0026gt;.hcl     darwin     linux     channel \u0026lt;name\u0026gt;     version \u0026lt;version\u0026gt;     on \u0026lt;event\u0026gt;     on \u0026gt; chmod     on \u0026gt; copy     on \u0026gt; message     on \u0026gt; rename     on \u0026gt; run     "},{"id":15,"href":"/hermit/packaging/schema/manifest/","title":"\u003cmanifest\u003e.hcl","parent":"Schema","content":"Each Hermit package manifest is a nested structure containing OS/architecture-specific configuration.\nBlocks       Block Description     channel \u0026lt;name\u0026gt; { … } Definition of and configuration for an auto-update channel.   darwin { … } Darwin-specific configuration.   linux { … } Linux-specific configuration.   on \u0026lt;event\u0026gt; { … } Triggers to run on lifecycle events.   version \u0026lt;version\u0026gt; { … } Definition of and configuration for a specific version.    Attributes       Attribute Type Description     apps [string]? Relative paths to Mac .app packages to install.   arch string? CPU architecture to match (amd64, 386, arm, etc.).   binaries [string]? Relative glob from $root to individual terminal binaries.   default string? Default version or channel if not specified.   description string Human readable description of the package.   dest string? Override archive extraction destination for package.   env {string: string}? Environment variables to export.   files {string: string}? Files to load strings from to be used in the manifest.   mirrors [string]? Mirrors to use if the primary source is unavailable.   provides [string]? This package provides the given virtual packages.   rename {string: string}? Rename files after unpacking to ${root}.   requires [string]? Packages this one requires.   root string? Override root for package.   sha256 string? SHA256 of source package for verification.   source string? URL for source package.   strip number? Number of path prefix elements to strip.   test string? Command that will test the package is operational.    "},{"id":16,"href":"/hermit/packaging/schema/darwin/","title":"darwin","parent":"Schema","content":"Darwin-specific configuration.\nUsed by: channel linux \u0026lt;manifest\u0026gt; version\nBlocks       Block Description     darwin { … } Darwin-specific configuration.   linux { … } Linux-specific configuration.   on \u0026lt;event\u0026gt; { … } Triggers to run on lifecycle events.    Attributes       Attribute Type Description     apps [string]? Relative paths to Mac .app packages to install.   arch string? CPU architecture to match (amd64, 386, arm, etc.).   binaries [string]? Relative glob from $root to individual terminal binaries.   dest string? Override archive extraction destination for package.   env {string: string}? Environment variables to export.   files {string: string}? Files to load strings from to be used in the manifest.   mirrors [string]? Mirrors to use if the primary source is unavailable.   provides [string]? This package provides the given virtual packages.   rename {string: string}? Rename files after unpacking to ${root}.   requires [string]? Packages this one requires.   root string? Override root for package.   sha256 string? SHA256 of source package for verification.   source string? URL for source package.   strip number? Number of path prefix elements to strip.   test string? Command that will test the package is operational.    "},{"id":17,"href":"/hermit/packaging/schema/linux/","title":"linux","parent":"Schema","content":"Linux-specific configuration.\nUsed by: channel darwin \u0026lt;manifest\u0026gt; version\nBlocks       Block Description     darwin { … } Darwin-specific configuration.   linux { … } Linux-specific configuration.   on \u0026lt;event\u0026gt; { … } Triggers to run on lifecycle events.    Attributes       Attribute Type Description     apps [string]? Relative paths to Mac .app packages to install.   arch string? CPU architecture to match (amd64, 386, arm, etc.).   binaries [string]? Relative glob from $root to individual terminal binaries.   dest string? Override archive extraction destination for package.   env {string: string}? Environment variables to export.   files {string: string}? Files to load strings from to be used in the manifest.   mirrors [string]? Mirrors to use if the primary source is unavailable.   provides [string]? This package provides the given virtual packages.   rename {string: string}? Rename files after unpacking to ${root}.   requires [string]? Packages this one requires.   root string? Override root for package.   sha256 string? SHA256 of source package for verification.   source string? URL for source package.   strip number? Number of path prefix elements to strip.   test string? Command that will test the package is operational.    "},{"id":18,"href":"/hermit/packaging/schema/channel/","title":"channel \u003cname\u003e","parent":"Schema","content":"Definition of and configuration for an auto-update channel.\nUsed by: \u0026lt;manifest\u0026gt;\nBlocks       Block Description     darwin { … } Darwin-specific configuration.   linux { … } Linux-specific configuration.   on \u0026lt;event\u0026gt; { … } Triggers to run on lifecycle events.    Attributes       Attribute Type Description     apps [string]? Relative paths to Mac .app packages to install.   arch string? CPU architecture to match (amd64, 386, arm, etc.).   binaries [string]? Relative glob from $root to individual terminal binaries.   dest string? Override archive extraction destination for package.   env {string: string}? Environment variables to export.   files {string: string}? Files to load strings from to be used in the manifest.   mirrors [string]? Mirrors to use if the primary source is unavailable.   provides [string]? This package provides the given virtual packages.   rename {string: string}? Rename files after unpacking to ${root}.   requires [string]? Packages this one requires.   root string? Override root for package.   sha256 string? SHA256 of source package for verification.   source string? URL for source package.   strip number? Number of path prefix elements to strip.   test string? Command that will test the package is operational.   update string Update frequency for this channel.   version string? Use the latest version matching this version glob as the source of this channel. Empty string matches all versions    "},{"id":19,"href":"/hermit/packaging/schema/version/","title":"version \u003cversion\u003e","parent":"Schema","content":"Definition of and configuration for a specific version.\nUsed by: \u0026lt;manifest\u0026gt;\nBlocks       Block Description     darwin { … } Darwin-specific configuration.   linux { … } Linux-specific configuration.   on \u0026lt;event\u0026gt; { … } Triggers to run on lifecycle events.    Attributes       Attribute Type Description     apps [string]? Relative paths to Mac .app packages to install.   arch string? CPU architecture to match (amd64, 386, arm, etc.).   binaries [string]? Relative glob from $root to individual terminal binaries.   dest string? Override archive extraction destination for package.   env {string: string}? Environment variables to export.   files {string: string}? Files to load strings from to be used in the manifest.   mirrors [string]? Mirrors to use if the primary source is unavailable.   provides [string]? This package provides the given virtual packages.   rename {string: string}? Rename files after unpacking to ${root}.   requires [string]? Packages this one requires.   root string? Override root for package.   sha256 string? SHA256 of source package for verification.   source string? URL for source package.   strip number? Number of path prefix elements to strip.   test string? Command that will test the package is operational.    "},{"id":20,"href":"/hermit/packaging/schema/on/","title":"on \u003cevent\u003e","parent":"Schema","content":"Triggers to run on lifecycle events.\nUsed by: channel darwin linux \u0026lt;manifest\u0026gt; version\nBlocks       Block Description     chmod { … } Change a files mode.   copy { … } A file to copy when the event is triggered.   message { … } Display a message to the user.   rename { … } Rename a file.   run { … } A command to run when the event is triggered.    "},{"id":21,"href":"/hermit/packaging/schema/chmod/","title":"on \u003e chmod","parent":"Schema","content":"Change a files mode.\nUsed by: on\nAttributes       Attribute Type Description     file string File to set mode on.   mode number File mode to set.    "},{"id":22,"href":"/hermit/packaging/schema/copy/","title":"on \u003e copy","parent":"Schema","content":"A file to copy when the event is triggered.\nUsed by: on\nAttributes       Attribute Type Description     from string The source file to copy from. Absolute paths reference the file system while relative paths are against the manifest source bundle.   to string The relative destination to copy to, based on the context.    "},{"id":23,"href":"/hermit/packaging/schema/message/","title":"on \u003e message","parent":"Schema","content":"Display a message to the user.\nUsed by: on\nAttributes       Attribute Type Description     text string Message text to display to user.    "},{"id":24,"href":"/hermit/packaging/schema/rename/","title":"on \u003e rename","parent":"Schema","content":"Rename a file.\nUsed by: on\nAttributes       Attribute Type Description     from string Source path to rename.   to string Destination path to rename to.    "},{"id":25,"href":"/hermit/packaging/schema/run/","title":"on \u003e run","parent":"Schema","content":"A command to run when the event is triggered.\nUsed by: on\nAttributes       Attribute Type Description     args [string]? The arguments to the binary   cmd string The command to execute   dir string? The directory where the command is run in. Defaults to the root directory.   env [string]? The environment variables for the execution   stdin string? Optional string to be used as the stdin for the command    "},{"id":26,"href":"/hermit/about/","title":"About","parent":"Hermit","content":"Hermit was created at CashApp (Square) by Alec Thomas and Juho Mäkinen of the Cash Cloud Platform team, with contributions by many others whose feedback is very much appreciated.\nThe source code for Hermit is here. The default open source set of package manifests is here.\n"},{"id":27,"href":"/hermit/","title":"Hermit","parent":"","content":"Hermit manages isolated, self-bootstrapping sets of tools in software projects.  Hermit ensures that your team, your contributors, and your CI have the same consistent tooling.  Packages installed via Hermit will be available on any future machine, Linux or Mac, by simply cloning the repository and running the linked binaries.  Each link will bootstrap Hermit if necessary, then auto-install the package, before executing the binary.   Get Started    Why Do I Need it?  If you've ever had to add something like the following to your project's README...\n Make sure you have at least Node 12.x.y, protoc x.y.z, GNU make version 4.x.y, and Go 1.16 or higher.\n ...then Hermit is for you.\n Example    Quickstart  Run this command and follow the instructions:\ncurl -fsSL https://github.com/cashapp/hermit/releases/download/stable/install.sh | /bin/bash    Packages  Default packages are available here.  Source code  Contributions are welcome here.  Problems?  Please file an issue and we'll look into it.   "}]